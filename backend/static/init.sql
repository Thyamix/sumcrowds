CREATE TABLE IF NOT EXISTS festival (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		expires_at INTEGER NOT NULL,
		created_at INTEGER NOT NULL,
		pin INTEGER,
		code STRING NOT NULL,
		password STRING
		);

CREATE TABLE IF NOT EXISTS event (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		active INTEGER NOT NULL,
		created_at INTEGER NOT NULL,
		last_used_at INTEGER NOT NULL,
		festival_id INTEGER NOT NULL,
		FOREIGN KEY (festival_id) REFERENCES festival(id)
		);

CREATE TABLE IF NOT EXISTS active (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		value INTEGER NOT NULL,
		time INTEGER NOT NULL,
		event_id INTEGER NOT NULL,
		FOREIGN KEY (event_id) REFERENCES event(id)
		);

CREATE TABLE IF NOT EXISTS archive (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		value INTEGER NOT NULL,
		time INTEGER NOT NULL,
		event_id INTEGER NOT NULL,
		FOREIGN KEY (event_id) REFERENCES event(id)
		);

CREATE TABLE IF NOT EXISTS max (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		max INTEGER NOT NULL,
		time INTEGER NOT NULL,
		event_id INTEGER NOT NULL,
		FOREIGN KEY (event_id) REFERENCES event(id)
		);

CREATE TABLE IF NOT EXISTS user (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT
		);

CREATE TABLE IF NOT EXISTS refresh_token (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		token STRING NOT NULL,
		expires_at INTEGER NOT NULL,
		last_used_at INTEGER NOT NULL,
		user_id INTEGER NOT NULL,
		revoked INTEGER NOT NULL,
		FOREIGN KEY (user_id) REFERENCES user(id)
		);

CREATE TABLE IF NOT EXISTS access_token (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		token STRING NOT NULL,
		expires_at INTEGER NOT NULL,
		user_id INTEGER NOT NULL,
		FOREIGN KEY (user_id) REFERENCES user(id)
		);

CREATE TABLE IF NOT EXISTS festival_access (
		id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
		last_used_at INTEGER NOT NULL,
		user_id INTEGER NOT NULL,
		festival_id INTEGER NOT NULL,
		FOREIGN KEY (user_id) REFERENCES user(id),
		FOREIGN KEY (festival_id) REFERENCES festival(id)
		);
